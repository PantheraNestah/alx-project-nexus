# Generated by Django 5.2.6 on 2025-09-28 18:17

# core/migrations/0002_seed_roles.py

from django.db import migrations

# A list of roles you want to exist in your database.
INITIAL_ROLES = [
    'user',
    'admin',
]

def seed_roles(apps, schema_editor):
    """
    Creates the initial 'user' and 'admin' roles in the database.
    This function is designed to be idempotent, meaning it can be run multiple
    times without creating duplicate roles or causing errors.
    """
    # We get the Role model from the historical app registry.
    # This is the standard way to interact with models in a data migration.
    Role = apps.get_model('core', 'Role')
    db_alias = schema_editor.connection.alias

    for role_name in INITIAL_ROLES:
        # get_or_create checks if a role with that name already exists.
        # If it does, it does nothing. If it doesn't, it creates it.
        Role.objects.using(db_alias).get_or_create(name=role_name)
        print(f"Role '{role_name}' ensured in database.")

def remove_roles(apps, schema_editor):
    """
    Optional: This function can be used to remove the roles if you ever
    need to reverse the migration. For this use case, it's often fine
    to do nothing on reversal.
    """
    Role = apps.get_model('core', 'Role')
    db_alias = schema_editor.connection.alias

    for role_name in INITIAL_ROLES:
        try:
            role = Role.objects.using(db_alias).get(name=role_name)
            role.delete()
            print(f"Role '{role_name}' removed from database.")
        except Role.DoesNotExist:
            print(f"Role '{role_name}' did not exist, skipping removal.")


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),  # This migration must run AFTER the tables are created
    ]

    operations = [
        migrations.RunPython(seed_roles, reverse_code=remove_roles),
    ]
